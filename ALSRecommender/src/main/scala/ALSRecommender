
/* ALSRecommender.scala */

import java.util.Date
import java.lang.Math._
import java.text.NumberFormat.getIntegerInstance
import scala.collection.Map
import scala.collection.mutable.ArrayBuffer
import scala.util.Random
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.SparkContext._
import org.apache.spark.broadcast.Broadcast
import org.apache.spark.mllib.recommendation._
import org.apache.spark.mllib.recommendation.ALS
import org.apache.spark.rdd.RDD


object ALSRecommender {

	def main(args: Array[String]) =  {
		val cluster_url = "local"
		val conf = new SparkConf()
					.setMaster(cluster_url)
					.setAppName("ALSRecommender")
					.set("spark.driver.memory", "6g")
					.set("spark.serializer", "org.apache.spark.serializer.KryoSerializer")

		// conf.registerKyroClasses(Array(classOf[MyCustomClass1], classOf[MyCustomClass2]))
		val sc = new SparkContext(conf)

		val hdfsPrefix = "hdfs://localhost:8020/user/doug/lastfm"
		val playCountsFile = hdfsPrefix + "/user_artist_data.txt"
		val artistsFile = hdfsPrefix + "/artist_data.txt"
		val artistAliasFile = hdfsPrefix + "/artist_alias.txt"
		val rawUserArtistData = sc.textFile(playCountsFile, 4)
		val rawArtistData = sc.textFile(artistsFile)
		val rawArtistAlias = sc.textFile(artistAliasFile)

		val artistAlias = rawArtistAlias.flatMap { line =>
			val tokens = line.split('\t')
			if (tokens(0).isEmpty) {
				None
			} else {
				Some((tokens(0).toInt, tokens(1).toInt))
			}
		}.collectAsMap()

		val bArtistAlias = sc.broadcast(artistAlias)

		val trainData = rawUserArtistData.map { line =>
			val Array(userID, artistID, count) = line.split(" ").map(_.toInt)
			val finalArtistID = bArtistAlias.value.getOrElse(artistID, artistID)
			Rating(userID, finalArtistID, count)
		}.cache()

		val model_nnma = ALS.trainImplicit(
										trainData,
										rank=10,
										iterations=5,
										lambda=0.01,
										alpha=1.0
		)
	}

	def buildArtistByID(rawArtistData: RDD[String]) =
		rawArtistData.flatMap { line =>
			val (id, name) = line.span(_ != '\t')
			if (name.isEmpty) {
				None
			} else {
			try {
				Some((id.toInt, name.trim))
			} catch {
				case e: NumberFormatException => None
			}
		}
	}

	def buildArtistAlias(rawArtistAlias: RDD[String]): Map[Int,Int] = {
		rawArtistAlias.flatMap { line =>
			val tokens = line.split('\t')
			if (tokens(0).isEmpty) {
				None
			} else {
				Some((tokens(0).toInt, tokens(1).toInt))
			}
		}.collectAsMap()
	}

}